name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: reg.sea.net.ua
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:

  buildx:

    runs-on: ubuntu-latest

    steps:
      # Step 2: Prepare variables for building and tagging the image
      - name: Prepare
        id: prepare
        run: |
          GHCR_IMAGE=ghcr.io/${GITHUB_REPOSITORY}
          DOCKER_PLATFORMS=linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x

          VERSION=$(echo ${GITHUB_REF#refs/*/} | sed 's/\//-/g') # Replace / with - in tag name
          TAGS="${GITHUB_REPOSITORY}:${VERSION}"

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAGS="$TAGS,${GITHUB_REPOSITORY}:latest"
          elif [[ $VERSION == "main" ]]; then
            TAGS="$TAGS,${GITHUB_REPOSITORY}:beta"
          fi

          GHCR_TAGS="${GHCR_IMAGE}:${VERSION}"
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            GHCR_TAGS="$GHCR_TAGS,${GHCR_IMAGE}:latest"
          elif [[ $VERSION == "main" ]]; then
            GHCR_TAGS="$GHCR_TAGS,${GHCR_IMAGE}:beta"
          fi

          echo "platforms=${DOCKER_PLATFORMS}" 
          echo "tags=${TAGS}"
          echo "ghcr-tags=${GHCR_TAGS}" 

    
    - uses: actions/checkout@v4
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.DOCKER_REGISTRY_URL }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    #This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      id: push
      #uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.prepare.outputs.tags }}
        platforms: ${{ steps.prepare.outputs.platforms }}
